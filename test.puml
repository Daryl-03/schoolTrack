@startuml
class com.schooltrack.controller.administateur.UserController {
- TableColumn<Utilisateur,String> emailColumn
- TableColumn<Utilisateur,String> nomColumn
- TableColumn<Utilisateur,String> numColumn
- TableColumn<Utilisateur,String> prenomColumn
- TableColumn<Utilisateur,String> typeColumn
- UtilisateurDAO utilisateurDAO
- TableView<Utilisateur> userTable
- Stage parentStage
+ void setParentStage(Stage)
~ void addUser(ActionEvent)
- void deleteUser(ActionEvent)
~ void editUser(ActionEvent)
- void initialize()
+ void initTable()
}
class com.schooltrack.controller.administateur.UserEditController {
- RadioButton adminBR
- RadioButton caissierBR
- TextField emailTextField
- TextField nomTextField
- PasswordField passwordTextField
- TextField prenomTextField
- RadioButton secretaireBR
- ToggleGroup type
- Label titleLabel
- TextField usernameTextField
- TextField numeroTextField
- Button addButton
- Stage dialogStage
- boolean okClicked
- Utilisateur utilisateur
+ void setDialogStage(Stage)
+ boolean isOkClicked()
+ Utilisateur getUtilisateur()
+ void setUtilisateur(Utilisateur)
~ void addUser(ActionEvent)
- boolean isInputValid()
- boolean isEmailValid(String)
- boolean isPhoneValid(String)
~ void handleCancel(ActionEvent)
- void initialize()
}
class com.schooltrack.models.Certificat {
- IntegerProperty id
- ObjectProperty<LocalDate> date
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ LocalDate getDate()
+ ObjectProperty<LocalDate> dateProperty()
+ void setDate(LocalDate)
}
class com.schooltrack.models.PaiementTableViewModel {
- Paiement paiement
- Rubrique rubrique
- Eleve eleve
+ Paiement getPaiement()
+ void setPaiement(Paiement)
+ Rubrique getRubrique()
+ void setRubrique(Rubrique)
+ Eleve getEleve()
+ void setEleve(Eleve)
}
class com.schooltrack.pdf.RecuGenerator {
+ void generate(String,Paiement)
}
class com.schooltrack.jdbc.TestPDF {
}
class com.schooltrack.models.EcheanceTableModel {
- ObjectProperty<LocalDate> date
- StringProperty label
+ LocalDate getDate()
+ ObjectProperty<LocalDate> dateProperty()
+ void setDate(LocalDate)
+ String getLabel()
+ StringProperty labelProperty()
+ void setLabel(String)
}
class com.schooltrack.controller.secretaire.MatiereEditController {
- TextField coeffTextField
- TextField matiereTextField
- TextArea descriptionTextArea
- Matiere matiere
- Stage dialogStage
- boolean okClicked
+ void setMatiere(Matiere)
+ Matiere getMatiere()
+ void setDialogStage(Stage)
+ boolean isOkClicked()
- void cancel(ActionEvent)
- void handleOk(ActionEvent)
- boolean isInputValid()
- void initialize()
}
class com.schooltrack.models.datasource.NoteDAO {
+ void create(Note)
+ Note read(int)
+ void update(Note)
+ void delete(int)
+ List<Note> readAll()
+ List<Note> readAllByBulletin(int)
+ void generateNotes(int)
+ void deleteNotes(int)
}
class com.schooltrack.controller.caissier.DashboardCaissierController {
- Label caisseLabel
- Label inscriptionLabel
- Label loginLabel
- Stage parentStage
+ void setParentStage(Stage)
+ void initialize()
}
class com.schooltrack.exceptions.DBHandlingException {
}
class com.schooltrack.models.datasource.ClasseDAO {
+ void create(Classe)
+ Classe read(int)
+ void update(Classe)
+ void delete(int)
+ List<Classe> readAll()
+ List<Classe> readAll(int)
+ List<Classe> readAll(int,int)
+ List<Classe> readAllSimple(int)
+ List<Classe> readAllWithoutEleves(int)
+ String readNom(int)
}
class com.schooltrack.models.datasource.MatiereDAO {
+ void create(Matiere)
+ Matiere read(int)
+ void update(Matiere)
+ void delete(int)
+ List<Matiere> readAll()
+ List<Matiere> readAllByClasse(int)
}
class com.schooltrack.models.datasource.BulletinDAO {
+ void create(Bulletin)
+ Bulletin read(int)
+ void update(Bulletin)
+ void delete(int)
+ List<Bulletin> readAll()
+ List<Bulletin> readAllByYear(int,int)
+ Bulletin read(int,int,int)
+ void generate(int,int)
}
class com.schooltrack.pdf.BulletinGenerator {
- {static} Font titleFont
- {static} Font subTitleFont
- {static} Font boldFont
- {static} Font normalFont
+ void generate(String,Bulletin)
}
class com.schooltrack.jdbc.TestConnection {
+ {static} void main(String[])
}
class com.schooltrack.exceptions.DAOException {
}
class com.schooltrack.controller.secretaire.EleveEditController {
- RadioButton FemmeBR
- TextField adrTextField
- Button cancelButton
- DatePicker dtNaissDatePicker
- TextField emailTextField
- ToggleGroup genre
- RadioButton hommeBR
- TextField lieuNaissTextField
- TextField nomTextField
- TextField numTextField
- Button okButton
- TextField prenomTextField
- Eleve eleve
- Stage dialogStage
- boolean okClicked
+ Eleve getEleve()
+ boolean isOkClicked()
+ void setDialogStage(Stage)
+ void setEleve(Eleve)
- void initialize()
- void handleOk()
- boolean isInputValid()
- boolean isValidEmail(String)
- boolean isValidPhoneNumber(String)
- void cancel()
}
class com.schooltrack.controller.secretaire.ReaffectationController {
- ChoiceBox<String> classeChoiceBox
- ChoiceBox<String> sectionChoiceBox
- List<Section> sections
- Stage dialogStage
- Eleve eleve
+ void setEleve(Eleve)
+ void setDialogStage(Stage)
~ void handleCancel(ActionEvent)
~ void handleValider(ActionEvent)
~ void initialize()
+ void initSectionChoiceBox()
- void updateClasseChoiceBox()
}
class com.schooltrack.models.Section {
- IntegerProperty id
- StringProperty Intitule
- ListProperty<Classe> classes
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ String getIntitule()
+ StringProperty intituleProperty()
+ void setIntitule(String)
+ ObservableList<Classe> getClasses()
+ ListProperty<Classe> classesProperty()
+ void setClasses(ObservableList<Classe>)
+ long getEffectif()
}
class com.schooltrack.models.EcheancierPaiement {
- IntegerProperty id
- ListProperty<LocalDate> echeances
- IntegerProperty id_classe
- IntegerProperty id_rubrique
- IntegerProperty id_annee
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ ObservableList<LocalDate> getEcheances()
+ ListProperty<LocalDate> echeancesProperty()
+ void setEcheances(ObservableList<LocalDate>)
+ int getId_classe()
+ IntegerProperty id_classeProperty()
+ void setId_classe(int)
+ int getId_rubrique()
+ IntegerProperty id_rubriqueProperty()
+ void setId_rubrique(int)
+ int getId_annee()
+ IntegerProperty id_anneeProperty()
+ void setId_annee(int)
+ String toString()
}
class com.schooltrack.jdbc.DBManager {
- {static} Connection connection
+ {static} Connection getConnection()
}
class com.schooltrack.utils.Alerts {
+ {static} void showError(Stage,String)
+ {static} boolean showConfirmation(Stage,String)
+ {static} boolean showConfirmation(Stage,String,String)
+ {static} void showInfo(Stage,String)
+ {static} boolean showSuccess(Stage,String,String)
+ {static} boolean showSuccess(Stage,String)
}
class com.schooltrack.HelloApplication {
+ void start(Stage)
+ {static} void main(String[])
}
interface com.schooltrack.csv.CSVReader {
+ List<String> readFile(File)
+ List<String[]> getData(List<String>)
+ List<T> csvToObjects(List<String[]>)
}
class com.schooltrack.models.datasource.UtilisateurDAO {
+ void create(Utilisateur)
+ Utilisateur read(int)
+ void update(Utilisateur)
+ void delete(int)
+ List<Utilisateur> readAll()
+ Utilisateur readByLogin(String)
+ Utilisateur readByLoginPassword(String,String)
+ int count()
}
class com.schooltrack.models.Rubrique {
- IntegerProperty id
- StringProperty intitule
- StringProperty description
- DoubleProperty montant
- ObjectProperty<EcheancierPaiement> echeancier
- IntegerProperty id_classe
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ String getIntitule()
+ StringProperty intituleProperty()
+ void setIntitule(String)
+ EcheancierPaiement getEcheancier()
~ ObjectProperty<EcheancierPaiement> echeancierProperty()
+ void setEcheancier(EcheancierPaiement)
+ double getMontant()
+ DoubleProperty montantProperty()
+ void setMontant(double)
+ String getDescription()
+ StringProperty descriptionProperty()
+ void setDescription(String)
+ int getId_classe()
+ IntegerProperty id_classeProperty()
+ void setId_classe(int)
+ String toString()
}
class com.schooltrack.models.datasource.EcheancierPaiementDAO {
+ void create(EcheancierPaiement)
+ EcheancierPaiement read(int)
+ void update(EcheancierPaiement)
+ void delete(int)
+ List<EcheancierPaiement> readAll()
+ List<LocalDate> readEcheances(int)
+ EcheancierPaiement readEcheancierPaiement(int,int,int)
+ void createEcheancierPaiementScolarite()
}
class com.schooltrack.csv.EleveReader {
+ List<String> readFile(File)
+ List<String> readFile(File,int)
+ List<String[]> getData(List<String>)
+ List<Eleve> csvToObjects(List<String[]>)
}
class com.schooltrack.models.AnneeScolaire {
- IntegerProperty id
- StringProperty intitule
- ObjectProperty<LocalDate> dateDebut
- ObjectProperty<LocalDate> dateFin
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ String getIntitule()
+ StringProperty intituleProperty()
+ void setIntitule(String)
+ LocalDate getDateDebut()
+ ObjectProperty<LocalDate> dateDebutProperty()
+ void setDateDebut(LocalDate)
+ LocalDate getDateFin()
+ ObjectProperty<LocalDate> dateFinProperty()
+ void setDateFin(LocalDate)
+ String toString()
}
class com.schooltrack.models.Matiere {
- IntegerProperty id
- StringProperty nom
- StringProperty description
- IntegerProperty coefficient
- IntegerProperty id_classe
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ String getNom()
+ StringProperty nomProperty()
+ void setNom(String)
+ int getCoefficient()
+ IntegerProperty coefficientProperty()
+ void setCoefficient(int)
+ int getId_classe()
+ IntegerProperty id_classeProperty()
+ void setId_classe(int)
+ String getDescription()
+ StringProperty descriptionProperty()
+ void setDescription(String)
}
class com.schooltrack.controller.AuthController {
- TextField loginField
- PasswordField passwordField
- Button loginButton
- Button closeButton
- Label errorLabel
- Stage primaryStage
+ void setPrimaryStage(Stage)
~ void initialize()
- void handleLogin()
- void reinitFields()
- boolean isInputValid()
- void showError(String)
- void handleClose()
}
class com.schooltrack.models.datasource.EleveDAO {
+ void create(Eleve)
+ String generateMatricule()
+ void inscription(Eleve)
+ void modifierInscription(Eleve)
+ LocalDate readDateInscription(int)
+ Eleve read(int)
+ void update(Eleve)
+ void delete(int)
+ void retirer(int)
+ List<Eleve> readAll()
+ List<Eleve> readAllByClasse(int,int)
+ Eleve readByNomPrenomDateNaissLieuNaiss(String,String,LocalDate,String)
+ Eleve readByMatricule(String)
+ List<Eleve> readByNom(String)
+ List<Eleve> readByPromptText(String)
}
class com.schooltrack.controller.secretaire.DashboardController {
- Label effectifCollege
- Label effectifElementaire
- Label effectifFroid
- Label effectifMaternelle
- Label loginLabel
- AnchorPane dashboardLayout
+ void setLoginLabelValue(String)
~ void initialize()
+ void setLoginLabel(String)
+ void initSectionSize()
}
class com.schooltrack.models.Bulletin {
- IntegerProperty id
- IntegerProperty trimestre
- FloatProperty moyenne
- ListProperty<Note> notes
- IntegerProperty id_eleve
- IntegerProperty id_classe
- IntegerProperty id_annee
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ int getTrimestre()
+ IntegerProperty trimestreProperty()
+ void setTrimestre(int)
+ float getMoyenne()
+ FloatProperty moyenneProperty()
+ void setMoyenne(float)
+ ObservableList<Note> getNotes()
+ ListProperty<Note> notesProperty()
+ void setNotes(ObservableList<Note>)
+ int getId_eleve()
+ IntegerProperty id_eleveProperty()
+ void setId_eleve(int)
+ int getId_classe()
+ IntegerProperty id_classeProperty()
+ void setId_classe(int)
+ int getId_annee()
+ IntegerProperty id_anneeProperty()
+ void setId_annee(int)
+ String toString()
}
class com.schooltrack.models.datasource.SectionDAO {
+ void create(Section)
+ Section read(int)
+ void update(Section)
+ void delete(int)
+ List<Section> readAll()
+ List<Section> readAll(int)
+ List<Section> readAllWithoutStudents(int)
+ List<Section> readAllSimple(int)
+ Section read(String)
}
class com.schooltrack.controller.caissier.PaiementController {
- TableView<PaiementTableViewModel> paiementTable
- TableColumn<PaiementTableViewModel,String> classeEleveColumn
- TableColumn<PaiementTableViewModel,LocalDate> dateColumn
- TableColumn<PaiementTableViewModel,String> matriculeColumn
- TableColumn<PaiementTableViewModel,Double> montantColumn
- TableColumn<PaiementTableViewModel,String> nomEleveColumn
- TableColumn<PaiementTableViewModel,String> numeroColumn
- TableColumn<PaiementTableViewModel,String> observationColumn
- TableColumn<PaiementTableViewModel,String> rubriqueColumn
- ChoiceBox<String> periodeChoiceBox
- ChoiceBox<String> rubriqueChoiceBox
- Stage parentStage
+ void setParentStage(Stage)
~ void handleAdd(ActionEvent)
~ void handleDelete(ActionEvent)
~ void handleEdit(ActionEvent)
~ void handlePrint(ActionEvent)
- void initialize()
- void updatePaiementTable()
+ void initChoiceBoxes()
}
class com.schooltrack.utils.Constantes {
+ {static} AnneeScolaire CURRENT_YEAR
+ {static} Utilisateur CURRENT_USER
+ {static} int MAX_SCHOOL_FEE
+ {static} int ID_CRECHE
}
class com.schooltrack.models.Reduction {
- IntegerProperty id
- StringProperty observation
- StringProperty Intitule
- DoubleProperty montant
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ String getObservation()
+ StringProperty observationProperty()
+ void setObservation(String)
+ String getIntitule()
+ StringProperty intituleProperty()
+ void setIntitule(String)
+ double getMontant()
+ DoubleProperty montantProperty()
+ void setMontant(double)
}
class com.schooltrack.pdf.CertificatGenerator {
- {static} Font TITLE_FONT
- {static} Font SUBTITLE_FONT
- {static} Font NORMAL_FONT
+ {static} void generate(String,Eleve)
}
class com.schooltrack.Main {
- Stage primaryStage
+ {static} void main(String[])
+ void start(Stage)
- void initRootLayout()
}
class com.schooltrack.models.datasource.PaiementDAO {
+ void create(Paiement)
+ String generateNumero()
+ Paiement read(int)
+ void update(Paiement)
+ void delete(int)
+ List<Paiement> readAll()
+ List<Paiement> readAllByEleveAndAnnee(int,int)
+ List<Paiement> readAllByEleveAndAnneeAndRubrique(int,int,int)
+ List<Paiement> readAllByEleveAndRubriqueAndDate(int,int)
+ List<Paiement> readAllByEleveAndRubriqueAndWeek(int,int)
+ List<Paiement> readAllByEleveAndRubriqueAndMonth(int,int)
+ List<Paiement> readAllByRubriqueAndDate(int)
+ List<Paiement> readAllByRubriqueAndWeek(int)
+ List<Paiement> readAllByRubriqueAndMonth(int)
+ List<Paiement> readAllByDate()
+ List<Paiement> readAllByWeek()
+ List<Paiement> readAllByMonth()
+ List<Paiement> readAllByYear()
+ List<Paiement> readAllByDateAndRubrique(String)
+ List<Paiement> readAllByWeekAndRubrique(String)
+ List<Paiement> readAllByMonthAndRubrique(String)
+ List<Paiement> readAllByYearAndRubrique(String)
+ List<Paiement> readAllByRubrique(String)
+ boolean isPayedInscription(int)
+ int countScolarite(int)
+ int getTranche(Paiement)
+ double getMontantMois()
+ int getNombreInscription()
}
class com.schooltrack.utils.PasswordUtil {
+ {static} String encrypt(String)
}
class com.schooltrack.models.Secretaire {
+ String getType()
}
class com.schooltrack.exceptions.PDFException {
}
class com.schooltrack.models.Administrateur {
+ String getType()
}
abstract class com.schooltrack.models.Utilisateur {
# IntegerProperty id
# StringProperty nom
# StringProperty prenom
# StringProperty login
# StringProperty password
# StringProperty email
# StringProperty telephone
+ String getLogin()
+ void setLogin(String)
+ StringProperty loginProperty()
+ String getPassword()
+ void setPassword(String)
+ StringProperty codeproProperty()
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ String getNom()
+ StringProperty nomProperty()
+ void setNom(String)
+ String getPrenom()
+ StringProperty prenomProperty()
+ void setPrenom(String)
+ StringProperty passwordProperty()
+ String getEmail()
+ StringProperty emailProperty()
+ void setEmail(String)
+ String getTelephone()
+ StringProperty telephoneProperty()
+ void setTelephone(String)
+ {abstract}String getType()
+ String toString()
+ StringProperty typeProperty()
}
class com.schooltrack.controller.secretaire.SectionController {
- TableColumn<Rubrique,Double> montantRubriqueColumn
- TableView<Rubrique> rubriqueTable
- TableColumn<Rubrique,String> rubriqueTblColumn
- TableColumn<Eleve,String> adresseColumn
- ChoiceBox<String> classeChoiceBox
- TableColumn<Matiere,Integer> coefColumn
- TableColumn<Eleve,LocalDate> dtNaissColumn
- Tab eleveTab
- TableView<Eleve> eleveTable
- TableColumn<Eleve,String> emailColumn
- TableColumn<Eleve,String> matriculeColumn
- TableColumn<Matiere,Integer> idMatColumn
- TableColumn<Eleve,String> lieuNaissColumn
- TableColumn<Matiere,String> matColumn
- TableView<Matiere> matTable
- TableColumn<Eleve,String> nomColumn
- TableColumn<Eleve,String> numColumn
- TableColumn<Eleve,String> prenomColumn
- Tab programmeTab
- ChoiceBox<String> sectionChoiceBox
- TableColumn<Eleve,String> sexeColumn
- TableColumn<EcheanceTableModel,LocalDate> echeanceColumn
- TableView<EcheanceTableModel> echeanceTable
- TableColumn<EcheanceTableModel,String> intituleColumn
- AnchorPane sectionLayout
- List<Section> sections
- int getClasseId()
- int getClasseIndex()
- int getSectionId()
- Stage getParentStage()
- void saveEcheance(ActionEvent)
- void editEcheance(ActionEvent)
- void addMat(ActionEvent)
- void deleteMat(ActionEvent)
- void editMat(ActionEvent)
- void handleCertificat()
- void handleAddEleve(ActionEvent)
- void handleBulletin(ActionEvent)
- void handleDeleteEleve(ActionEvent)
- void handleEditEleve(ActionEvent)
- void handleReaffecter()
- void handlePaiement()
- void importCsv(ActionEvent)
- void initialize()
- void updateRubriqueTable()
- void mapRubriqueTableToData()
- void updateEcheanceTable()
- void mapEcheanceTableToData()
- void mapMatTableToData()
- void mapEleveTableToData()
- void updateMatTable()
- void updateClasseChoiceBox()
- void updateEleveTable()
+ void initSectionChoiceBox()
}
class com.schooltrack.models.datasource.AnneeScolaireDAO {
+ int readLastId()
+ void create(AnneeScolaire)
+ AnneeScolaire read(int)
+ void update(AnneeScolaire)
+ void delete(int)
+ List<AnneeScolaire> readAll()
+ List<String> readAllIntitules()
+ AnneeScolaire readByIntitule(String)
+ AnneeScolaire readLast()
}
class com.schooltrack.models.Note {
- IntegerProperty id
- DoubleProperty valeur
- ObjectProperty<Matiere> matiere
- IntegerProperty id_bulletin
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ double getValeur()
+ DoubleProperty valeurProperty()
+ void setValeur(float)
+ void setValeur(double)
+ Matiere getMatiere()
+ ObjectProperty<Matiere> matiereProperty()
+ void setMatiere(Matiere)
+ int getId_bulletin()
+ IntegerProperty id_bulletinProperty()
+ void setId_bulletin(int)
}
class com.schooltrack.models.Caissier {
+ String getType()
}
class com.schooltrack.controller.secretaire.BulletinController {
- Stage dialogStage
- Eleve eleve
- Classe classe
- Label PrenomLabel
- TableColumn<Note,Integer> coefColumn
- Label idLabel
- TableColumn<Note,String> matColumn
- TextField moyenneField
- Label nomLabel
- TableColumn<Note,Double> noteColumn
- TableView<Note> notesTable
- AnchorPane rootLayout
- int indexEleve
- ChoiceBox<String> trimestreChoiceBox
- void handleExit(ActionEvent)
- void handleSave(ActionEvent)
- void handlePrint(ActionEvent)
- void handleEdit(ActionEvent)
- void leftBulletin(ActionEvent)
- void rightBulletin(ActionEvent)
+ void setClasse(Classe)
+ void setIndexEleve(int)
+ void setEleve(Eleve)
+ void setDialogStage(Stage)
- void initialize()
- void updateNotesTable()
+ void initLayoutFeatures()
}
class com.schooltrack.controller.administateur.DashboardAdminController {
- Label caisseLabel
- Label inscriptionLabel
- Label loginLabel
- Label nombreUtilisateurLabel
- void initialize()
}
class com.schooltrack.HelloController {
- Label welcomeText
# void onHelloButtonClick()
}
class com.schooltrack.controller.HomeController {
- AnchorPane rootLayout
- Utilisateur utilisateurConnecte
- Stage parentStage
- Stage actualStage
- ChoiceBox<String> anneeScolaireChoiceBox
- Label loggedUserLabel
- TextField promptRechercheTextField
+ void setActualStage(Stage)
+ void setParentStage(Stage)
+ void setUtilisateurConnecte(Utilisateur)
- void classes()
+ void dashboard()
+ void initRootFeatures()
- void inscription()
- void searchEleve()
- void paiement()
- void initialize()
+ void users()
- void deconnexion()
- void close()
}
class com.schooltrack.models.datasource.RubriqueDAO {
+ void create(Rubrique)
+ Rubrique read(int)
+ void update(Rubrique)
+ void delete(int)
+ List<Rubrique> readAll()
+ List<Rubrique> readAllByClasse(int)
+ List<Rubrique> readAllByIntitule(String)
+ List<String> readAllIntitule()
+ Rubrique readByIntituleAndMatricule(String,String)
+ Rubrique readScolariteByClasse(int)
}
class com.schooltrack.controller.caissier.PaiementEleveController {
- TableColumn<PaiementTableViewModel,LocalDate> dateColumn
- TableView<PaiementTableViewModel> elevePaiementTable
- Label inscriptionCountLabel
- Label inscriptionStatusLabel
- TableColumn<PaiementTableViewModel,Double> montantColumn
- TableColumn<PaiementTableViewModel,String> numeroColumn
- TableColumn<PaiementTableViewModel,String> observationColumn
- TableColumn<PaiementTableViewModel,String> rubriqueColumn
- Label scolariteCountLabel
- Label scolariteStatusLabel
- PaiementDAO paiementDAO
- RubriqueDAO rubriqueDAO
- Stage dialogStage
- Eleve eleve
+ void setDialogStage(Stage)
+ void setEleve(Eleve)
- void handleClose()
- void handlePrint()
- void initialize()
+ void loadFeatures()
}
class com.schooltrack.controller.caissier.PaiementEditController {
- TextField matriculeTextField
- ChoiceBox<String> rubriqueChoiceBox
- TextArea observationsTextArea
- Label titleLabel
- Paiement paiement
- Stage actualStage
- Stage parentStage
- PaiementDAO paiementDAO
- EleveDAO eleveDAO
- RubriqueDAO rubriqueDAO
- boolean editMode
+ void setParentStage(Stage)
+ void setActualStage(Stage)
~ void handleCancel(ActionEvent)
+ void setPaiement(Paiement)
~ void handleOk(ActionEvent)
- void initialize()
+ void initRubriqueChoiceBox()
- boolean isInputValid()
}
class com.schooltrack.exceptions.CSVReaderException {
}
class com.schooltrack.models.factory.UtilisateurFactory {
+ {static} Utilisateur getUtilisateur(String)
}
interface com.schooltrack.models.datasource.DAO {
~ void create(T)
~ T read(int)
~ void update(T)
~ void delete(int)
~ List<T> readAll()
}
class com.schooltrack.controller.secretaire.InscriptionController {
- Stage parentStage
- List<Section> sections
- TextField adresseTextField
- DatePicker dtNaissPicker
- RadioButton femininBR
- TextField lieuNaissTextField
- TextField mailTextField
- RadioButton masculinBR
- TextField nomTextField
- TextField prenomTextField
- ChoiceBox<String> sectionChoiceBox
- ChoiceBox<String> classeChoiceBox
- ToggleGroup sexe
- TextField telephoneTextField
+ void setParentStage(Stage)
~ void inscrire(ActionEvent)
- void clearFields()
- void initialize()
- void updateClasseChoiceBox()
+ void initSectionChoiceBox()
- boolean isInputValid()
- boolean isValidEmail(String)
- boolean isValidPhoneNumber(String)
}
class com.schooltrack.models.Eleve {
- IntegerProperty id
- StringProperty matricule
- StringProperty nom
- StringProperty prenom
- StringProperty adresse
- ObjectProperty<LocalDate> dateDeNaissance
- StringProperty lieuDeNaissance
- StringProperty numtelephone
- StringProperty email
- StringProperty sexe
- ListProperty<Paiement> paiements
- ListProperty<Bulletin> bulletins
- IntegerProperty id_classe
- StringProperty classe
+ String getClasse()
+ StringProperty classeProperty()
+ void setClasse(String)
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ String getMatricule()
+ StringProperty matriculeProperty()
+ void setMatricule(String)
+ String getNom()
+ StringProperty nomProperty()
+ void setNom(String)
+ String getPrenom()
+ StringProperty prenomProperty()
+ void setPrenom(String)
+ String getAdresse()
+ StringProperty adresseProperty()
+ void setAdresse(String)
+ LocalDate getDateDeNaissance()
+ ObjectProperty<LocalDate> dateDeNaissanceProperty()
+ void setDateDeNaissance(LocalDate)
+ String getLieuDeNaissance()
+ StringProperty lieuDeNaissanceProperty()
+ void setLieuDeNaissance(String)
+ String getNumtelephone()
+ StringProperty numtelephoneProperty()
+ void setNumtelephone(String)
+ String getEmail()
+ StringProperty emailProperty()
+ void setEmail(String)
+ String getSexe()
+ StringProperty sexeProperty()
+ void setSexe(String)
+ ObservableList<Paiement> getPaiements()
+ ListProperty<Paiement> paiementsProperty()
+ void setPaiements(ObservableList<Paiement>)
+ ObservableList<Bulletin> getBulletins()
+ ListProperty<Bulletin> bulletinsProperty()
+ void setBulletins(ObservableList<Bulletin>)
+ int getId_classe()
+ IntegerProperty id_classeProperty()
+ void setId_classe(int)
+ String toString()
}
class com.schooltrack.models.Classe {
- IntegerProperty id
- StringProperty nom
- ListProperty<Rubrique> rubriques
- ListProperty<Matiere> matieres
- ListProperty<Eleve> eleves
- IntegerProperty id_section
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ String getNom()
+ StringProperty nomProperty()
+ void setNom(String)
+ ObservableList<Rubrique> getRubriques()
+ ListProperty<Rubrique> rubriquesProperty()
+ void setRubriques(ObservableList<Rubrique>)
+ ObservableList<Matiere> getMatieres()
+ ListProperty<Matiere> matieresProperty()
+ void setMatieres(ObservableList<Matiere>)
+ ObservableList<Eleve> getEleves()
+ ListProperty<Eleve> elevesProperty()
+ void setEleves(ObservableList<Eleve>)
+ int getId_section()
+ IntegerProperty id_sectionProperty()
+ void setId_section(int)
+ String toString()
}
class com.schooltrack.controller.SearchResultController {
- TableColumn<Eleve,String> adresseColumn
- TableColumn<Eleve,LocalDate> dtNaissColumn
- TableView<Eleve> eleveTable
- TableColumn<Eleve,String> emailColumn
- TableColumn<Eleve,String> matriculeColumn
- TableColumn<Eleve,String> lieuNaissColumn
- TableColumn<Eleve,String> nomColumn
- TableColumn<Eleve,String> numColumn
- TableColumn<Eleve,String> prenomColumn
- TableColumn<Eleve,String> sexeColumn
- TableColumn<Eleve,String> classeColumn
- String prompt
- Stage parentStage
+ void setParentStage(Stage)
+ void setPrompt(String)
- void initialize()
}
class com.schooltrack.models.Paiement {
- IntegerProperty id
- StringProperty numero
- ObjectProperty<LocalDate> date
- StringProperty observation
- DoubleProperty montant
- IntegerProperty id_rubrique
- IntegerProperty id_eleve
- IntegerProperty id_annee
+ int getId()
+ IntegerProperty idProperty()
+ void setId(int)
+ LocalDate getDate()
+ ObjectProperty<LocalDate> dateProperty()
+ void setDate(LocalDate)
+ String getObservation()
+ StringProperty observationProperty()
+ void setObservation(String)
+ double getMontant()
+ DoubleProperty montantProperty()
+ void setMontant(float)
+ void setMontant(double)
+ int getId_rubrique()
+ IntegerProperty id_rubriqueProperty()
+ void setId_rubrique(int)
+ int getId_eleve()
+ IntegerProperty id_eleveProperty()
+ void setId_eleve(int)
+ int getId_annee()
+ IntegerProperty id_anneeProperty()
+ void setId_annee(int)
+ String getNumero()
+ StringProperty numeroProperty()
+ void setNumero(String)
}


com.schooltrack.models.datasource.DAO <|.. com.schooltrack.models.datasource.NoteDAO
com.schooltrack.exceptions.Exception <|-- com.schooltrack.exceptions.DBHandlingException
com.schooltrack.models.datasource.DAO <|.. com.schooltrack.models.datasource.ClasseDAO
com.schooltrack.models.datasource.DAO <|.. com.schooltrack.models.datasource.MatiereDAO
com.schooltrack.models.datasource.DAO <|.. com.schooltrack.models.datasource.BulletinDAO
com.schooltrack.exceptions.Exception <|-- com.schooltrack.exceptions.DAOException
javafx.application.Application <|-- com.schooltrack.HelloApplication
com.schooltrack.models.datasource.DAO <|.. com.schooltrack.models.datasource.UtilisateurDAO
com.schooltrack.models.datasource.DAO <|.. com.schooltrack.models.datasource.EcheancierPaiementDAO
com.schooltrack.csv.CSVReader <|.. com.schooltrack.csv.EleveReader
com.schooltrack.models.Serializable <|.. com.schooltrack.models.Matiere
com.schooltrack.models.datasource.DAO <|.. com.schooltrack.models.datasource.EleveDAO
com.schooltrack.models.datasource.DAO <|.. com.schooltrack.models.datasource.SectionDAO
javafx.application.Application <|-- com.schooltrack.Main
com.schooltrack.models.datasource.DAO <|.. com.schooltrack.models.datasource.PaiementDAO
com.schooltrack.models.Utilisateur <|-- com.schooltrack.models.Secretaire
com.schooltrack.exceptions.Exception <|-- com.schooltrack.exceptions.PDFException
com.schooltrack.models.Utilisateur <|-- com.schooltrack.models.Administrateur
com.schooltrack.models.datasource.DAO <|.. com.schooltrack.models.datasource.AnneeScolaireDAO
com.schooltrack.models.Serializable <|.. com.schooltrack.models.Note
com.schooltrack.models.Utilisateur <|-- com.schooltrack.models.Caissier
com.schooltrack.models.datasource.DAO <|.. com.schooltrack.models.datasource.RubriqueDAO
com.schooltrack.exceptions.Exception <|-- com.schooltrack.exceptions.CSVReaderException
@enduml